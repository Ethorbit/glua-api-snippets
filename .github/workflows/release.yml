name: release
on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 0 * * 2'
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Install dependencies
        run: npm ci
      # - name: Scrape wiki
      #   run: npm run cli:scrape-wiki
      - name: Install zip
        uses: montudor/action-zip@v1
      - name: Test release action
        run: |
          # Create some dummy files, zip them and create a release.json in dist/release
          mkdir -p ./dist/a
          mkdir -p ./dist/b
          mkdir -p ./dist/release
          echo "test" > ./dist/a/test.txt
          echo "test2" > ./dist/b/test2.txt
          echo "test3" > ./dist/b/test3.txt
          zip -r ./dist/release/release-a.lua.zip ./dist/a
          zip -r ./dist/release/release-b.json.zip ./dist/b
          echo "{\"version\": \"1.0.0\", \"releaseFiles\": [\"./dist/release/release-a.lua.zip\", \"./dist/release/release-b.json.zip\"]}" > ./dist/release/release.json
      # - name: Pack release
      #   run: npm run cli:pack-release
      - name: Get release files and version
        id: release_json
        run: |
          content=`cat ./dist/release/release.json`
          # the following lines are only required for multi line json
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          # end of optional handling for multi line json
          echo "::set-output name=releaseJson::$content"
      - name: Create release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: ${{ fromJson(steps.release_json.outputs.releaseJson).version }}
          body: |
            # ðŸ“… ${{ fromJson(steps.release_json.outputs.releaseJson).version }}
            **This release was automatically generated by a GitHub Action.**
          artifacts: ${{ join(fromJson(steps.release_json.outputs.releaseJson).releaseFiles, ',') }}
          